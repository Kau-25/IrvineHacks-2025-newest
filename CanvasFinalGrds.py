"""
Code for testing Canvas API, later incoporated for the calendar function of
the Tamogachi app
 - Need user to input their own access token, which can be created at the link
   <canvas_url>/profile/settings
 - Used "https://canvas.eee.uci.edu" url for testing, might implement other url
   soon
"""

# Utilized requests library for HTTP requests
import json
import requests

canvasURL = "https://canvas.eee.uci.edu"

def API_call(token, url="https://canvas.eee.uci.edu", requestURL = ""):
    """
    http request to the user's Canvas url,
    where Canvas requires authentication with OAuth2

    Parameter:
     - url: string for the Canvas url (ex: canvas.eee.uci.edu)
     - requestURL: the http request url for Canvas API
     - tkn: token from the user, has to be manually generated by them

    Output:
    returns a response object under the requests library
    """
    # Set up query string to send the OAuth2 token

    payload = {"access_token" : token}
    # Add params with the full URL
    fullURL = url + requestURL
    response = requests.get(fullURL, params=payload)

    # reuturn the response object
    return response

# Use dictionary output from matchCourseNameID to match
# name of course and the final score
def finalGradesDict(tkn):
    """
    Parameter:
     - tkn: User Token

    Output: A dictionary where
     - Key:     course ID
     - Value:   final score for course (from 0 - 100 or have a value of None)
    """

    # Get user enrollment (to get final score for a course)
    requestEnrollment = "/api/v1/users/self/enrollments"
    enrollmentRespond = API_call(tkn, canvasURL, requestEnrollment)

    # Make sure the http response was successful
    if (enrollmentRespond.status_code != 200):
        return

    courseScores = {}
    # Get JSON string to a dictionary
    courseDict = json.loads(enrollmentRespond.text)


    for dictionary in courseDict:
        # Get course id:
        courseID = dictionary["course_id"]
        # Get final grade in grade dictioanry
        # - not all courses have a final grade, so just don't consider them
        gradesDict = dictionary["grades"]
        finalScore = gradesDict.get("final_score", None)
        # Add score to dictionary
        courseScores[courseID] = finalScore

    # Get dictionary of currently attending courses
    attendingDict = attendingClasses(tkn, courseDict)

    return courseScores, attendingDict


def matchCourseNameID(tkn):
    """
    Parameter:
     - tkn: User token

    Output: a dictionary with
    - key:   courseID
    - value: courseName
    """

    # Get courses from user, in order to match course name and course ids
    requestCourse = "/api/v1/courses/"
    courseRsp = API_call(tkn, canvasURL, requestCourse)

    # Make sure http response was successful
    if (courseRsp.status_code != 200):
        return

    idNameDictionary = {}
    # Get JSON string to a dictionary
    courseDict = json.loads(courseRsp.text)

    # Iterate through every course
    for course in courseDict:
        courseName = course.get("name", -1)
        courseID = course.get("id", -1)
        # print(str(courseID) + " " + str(courseName))
        if (courseName != -1 and courseID != -1):
            idNameDictionary[courseID] = courseName

    return idNameDictionary

import datetime

def attendingClasses(tkn, courseDict):
    """
    returns
    key: course id
    value: course name
    """
    attendingDict = {}

    for course in courseDict:
        # Get time when Canvas course was last updated
        lastUpdate = course["updated_at"]
        
        # string maniuplation, since it is formatted with 
        # YEAR-MONTH-DATETTIME
        timeLst = lastUpdate.split("-")
        # month will always be located at the 1st index
        month = timeLst[1]

        # Since a quarter lasts 11 weeks, it takes up 2.75 months.
        # Get computer date, and courses that have been updated between
        # 2.75 months are considered to be enrolled
        current_time = datetime.datetime.now()
        currentMonth = current_time.month

        monthPassed = currentMonth - int(month)
        # If monthPassed is negative, add 12 to it
        if (monthPassed < 0):
            monthPassed += 12

        # print(month + ": " + str(monthPassed))

        # Add course with monthPassed smaller to 2.75 to attendingClass dictionary
        if (monthPassed < 2.75):
            # Get API call in order to get course name
            courseID = course["course_id"]
            requestCourse = "/api/v1/courses/" + str(courseID)
            rsp = API_call(tkn, canvasURL, requestURL=requestCourse)

            # Get JSON string to a dictionary
            detailsDict = json.loads(rsp.text)

            # Add key and value pairs
            attendingDict[courseID] = detailsDict["course_code"]

    return attendingDict